// services/fileService.js
const File = require('../models/File');
const path = require('path');
const fs = require('fs').promises;

class FileService {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –≤ –ë–î
  async saveFileInfo(filename, url, originalName, size, mimetype) {
    try {
      const newFile = new File({
        filename,
        originalName,
        url,
        size,
        mimetype,
        uploadedAt: new Date()
      });
      
      const savedFile = await newFile.save();
      console.log('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', savedFile._id);
      return savedFile;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –ë–î:', error.message);
      throw new Error(`Failed to save file info: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  async getAllFiles(limit = 10, skip = 0) {
    try {
      const files = await File.find()
        .sort({ uploadedAt: -1 })
        .limit(limit)
        .skip(skip);
      
      const total = await File.countDocuments();
      
      return {
        files,
        total,
        hasMore: skip + files.length < total
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error.message);
      throw new Error(`Failed to get files: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ ID
  async getFileById(fileId) {
    try {
      const file = await File.findById(fileId);
      if (!file) {
        throw new Error('File not found');
      }
      return file;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
      throw new Error(`Failed to get file: ${error.message}`);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  async deleteFile(fileId) {
    try {
      const file = await File.findById(fileId);
      if (!file) {
        throw new Error('File not found');
      }

      // –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
      const filePath = path.join(__dirname, '../uploads', file.filename);
      try {
        await fs.unlink(filePath);
        console.log('üóëÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω:', filePath);
      } catch (unlinkError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª:', unlinkError.message);
      }

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
      await File.findByIdAndDelete(fileId);
      console.log('üóëÔ∏è –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î:', fileId);
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
      throw new Error(`Failed to delete file: ${error.message}`);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Ñ–∞–π–ª–∞
  generateFileUrl(req, filename) {
    return `${req.protocol}://${req.get('host')}/uploads/${filename}`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  async fileExists(filename) {
    try {
      const filePath = path.join(__dirname, '../uploads', filename);
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
  async updateFileClassification(fileId, classificationData) {
    try {
      const updatedFile = await File.findByIdAndUpdate(
        fileId,
        {
          classification: classificationData,
          isAnalyzed: true
        },
        { new: true }
      );
      
      if (!updatedFile) {
        throw new Error('File not found');
      }
      
      console.log('üìä –î–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ñ–∞–π–ª–∞:', fileId);
      return updatedFile;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
      throw new Error(`Failed to update classification: ${error.message}`);
    }
  }
}

module.exports = new FileService();
